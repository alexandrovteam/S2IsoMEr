[{"path":"https://alexandrovteam.github.io/S2IsoMEr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 S2IsoMEr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/articles/MSEA_enrichment-single_cell_metabolomics.html","id":"loading-packages","dir":"Articles","previous_headings":"","what":"Loading packages","title":"MSEA enrichment - single cell metabolomics","text":"","code":"library(S2IsoMEr) library(dplyr) library(tidyr) library(ggplot2)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/articles/MSEA_enrichment-single_cell_metabolomics.html","id":"dataset","dir":"Articles","previous_headings":"","what":"Dataset","title":"MSEA enrichment - single cell metabolomics","text":"single-cell dataset used SpaceM paper, models NASH stimulating Hepa-RG cells fatty acids inhibitors compared control, followed MALDI imaging MS. data freely available MetaboLights.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/articles/MSEA_enrichment-single_cell_metabolomics.html","id":"download-single-cell-matrices-and-associated-metadata","dir":"Articles","previous_headings":"Dataset","what":"Download single-cell matrices and associated metadata","title":"MSEA enrichment - single cell metabolomics","text":"NASH_scm contains single-cell metabolite matrix main input well condition per cell NASH_scm$metadata. main required files run single-cell metabolomics enrichment. condition_metadata contains METASPACE dataset names replicate, metaspace_annotations contains annotation results dataset SpaceM project METASPACE. use annotation results corresponding FDR thresholds select metabolites input query corresponding universe enrichment.","code":"NASH_scm_tmp = tempfile() download.file(\"https://zenodo.org/records/13318721/files/NASH_scm_dataset.rds\", destfile = NASH_scm_tmp) NASH_scm = readRDS(NASH_scm_tmp)  condition_metadata_tmp = tempfile() download.file(\"https://zenodo.org/records/13318721/files/spacem_scm_matrices.rds\", destfile = condition_metadata_tmp) condition_metadata = readRDS(condition_metadata_tmp)[[\"metaspace_dataset_names\"]]  metaspace_annotations_tmp = tempfile() download.file(\"https://zenodo.org/records/13318721/files/SpaceM_metaspace_ds_annotations.rds\", destfile = metaspace_annotations_tmp) metaspace_annotations = readRDS(metaspace_annotations)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/articles/MSEA_enrichment-single_cell_metabolomics.html","id":"prepare-the-input-data","dir":"Articles","previous_headings":"Dataset","what":"Prepare the input data","title":"MSEA enrichment - single cell metabolomics","text":"","code":"scm = NASH_scm$scm %>%    as.matrix() %>%    t() conds = NASH_scm$metadata %>%   column_to_rownames(\"Cell\") conds = conds[colnames(scm),]  conds_unique = conds %>%    dplyr::distinct()  metaspace_annotations = metaspace_annotations %>%    dplyr::left_join(condition_metadata, by = c(\"ds_name\" = \"dataset_name\")) %>%   dplyr::rename(\"Replicate\" = \"Condition\") %>%   dplyr::left_join(conds_unique)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/articles/MSEA_enrichment-single_cell_metabolomics.html","id":"msea","dir":"Articles","previous_headings":"","what":"MSEA","title":"MSEA enrichment - single cell metabolomics","text":"notebook, run MSEA conditions control. follow first steps object initialization introduced ORA vignette, check information parameters passed initEnrichment function. Additional arguments initEnrichment wasn’t used ORA needed MSEA include : ranking.: Ranking metric MSEA, supported options : logFC : Log2 Fold change. common easier interpret wilcox.test : Wilcoxon rank sum statistic (signed based LFC sign improve interpretation) t.test : Student’s t-Test One-tailed (signed based LFC sign improve interpretation) BWS : Baumgartner-Weiss-Schindler test statistic (signed based LFC sign improve interpretation) gsea.method : MSEA method. Based either KS-signed method fgsea. recommend using fgsea Note : BWS recommended alternative Wilcoxon rank sum test paper. support BWS ranking metric, recommend double checking interpretation results compared Log2 Fold changes commonly used. Following object initialization, call Run_enrichment internally calls Run_bootstrap_MSEA. additional list arguments Run_bootstrap_MSEA recommend defining following arguments Run_enrichment : n_bootstraps: Number bootstrap iterations. default 50, increasing number generally improves accuracy, though slow process. Adjust according needs. recommend minimum 50 maximum 1000. 100 acceptable. min_pathway_size : minimum number metabolites must present given term considered detailed information output, check documentation ?Run_bootstrap_MSEA.","code":"desired_fdr = 0.1 desired_annot_db = \"HMDB\"  Multi_cond_res = list() MSEA_results = list() for (c in c(\"F\", \"FI\", \"FIT\")){   cond_x = \"U\"   cond_y = c    annots_des_fdr = metaspace_annotations %>%     dplyr::filter(Condition %in% c(cond_x, cond_y),                   fdr <= desired_fdr,                   str_detect(db, desired_annot_db)) %>%     pull(formula_adduct) %>%     intersect(rownames(scm))    input_scm = scm[annots_des_fdr,]     MSEA_obj = initEnrichment(scmatrix = input_scm, conditions = conds$Condition,                             enrichment_type = \"MSEA\",annot_db = desired_annot_db,                             consider_isomers = T, consider_isobars = T,                             polarization_mode = \"positive\",                             background_type = \"sub_class\",                             molecule_type = \"Metabo\",                             condition.x = cond_x,                             condition.y = cond_y,                             ranking.by = \"BWS\",                             gsea.method = \"fgsea\")    MSEA_res = Run_enrichment(object = MSEA_obj,report_ambiguity_scores = T)    enrich_res = MSEA_res$enrichment_analysis$enrichment_results %>%     dplyr::mutate(condition.x = \"U\",                   condition.y = c)    Multi_cond_res[[c]] = enrich_res   MSEA_results[[c]] = MSEA_res }  Multi_cond_res = Multi_cond_res %>% dplyr::bind_rows()"},{"path":[]},{"path":"https://alexandrovteam.github.io/S2IsoMEr/articles/MSEA_enrichment-single_cell_metabolomics.html","id":"multi-condition-heatmap","dir":"Articles","previous_headings":"Visualization","what":"Multi-condition Heatmap","title":"MSEA enrichment - single cell metabolomics","text":"","code":"plot_MSEA_Multi_cond(combined_MSEA_res = Multi_cond_res,                          alpha_cutoff = 0.05)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/articles/MSEA_enrichment-single_cell_metabolomics.html","id":"barplot","dir":"Articles","previous_headings":"Visualization","what":"Barplot","title":"MSEA enrichment - single cell metabolomics","text":"","code":"barplot_MSEA_boot(object = MSEA_results[[\"F\"]],                   q.value.cutoff = 0.2, by.statistic = \"ES\")"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/articles/ORA_enrichment-single_cell_metabolomics.html","id":"loading-packages","dir":"Articles","previous_headings":"","what":"Loading packages","title":"ORA enrichment - single cell metabolomics","text":"","code":"library(S2IsoMEr) library(dplyr) library(tidyr) library(ggplot2)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/articles/ORA_enrichment-single_cell_metabolomics.html","id":"dataset","dir":"Articles","previous_headings":"","what":"Dataset","title":"ORA enrichment - single cell metabolomics","text":"single-cell dataset used SpaceM paper, models NASH stimulating Hepa-RG cells fatty acids inhibitors compared control, followed MALDI imaging MS. data freely available MetaboLights.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/articles/ORA_enrichment-single_cell_metabolomics.html","id":"download-single-cell-matrices-and-associated-metadata","dir":"Articles","previous_headings":"Dataset","what":"Download single-cell matrices and associated metadata","title":"ORA enrichment - single cell metabolomics","text":"NASH_scm contains single-cell metabolite matrix main input well condition per cell NASH_scm$metadata. main required files run single-cell metabolomics enrichment. condition_metadata contains METASPACE dataset names replicate, metaspace_annotations contains annotation results dataset SpaceM project METASPACE. use annotation results corresponding FDR thresholds select metabolites input query corresponding universe enrichment.","code":"NASH_scm_tmp = tempfile() download.file(\"https://zenodo.org/records/13318721/files/NASH_scm_dataset.rds\", destfile = NASH_scm_tmp) NASH_scm = readRDS(NASH_scm_tmp)  condition_metadata_tmp = tempfile() download.file(\"https://zenodo.org/records/13318721/files/spacem_scm_matrices.rds\", destfile = condition_metadata_tmp) condition_metadata = readRDS(condition_metadata_tmp)[[\"metaspace_dataset_names\"]]  metaspace_annotations_tmp = tempfile() download.file(\"https://zenodo.org/records/13318721/files/SpaceM_metaspace_ds_annotations.rds\", destfile = metaspace_annotations_tmp) metaspace_annotations = readRDS(metaspace_annotations)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/articles/ORA_enrichment-single_cell_metabolomics.html","id":"prepare-the-input-data","dir":"Articles","previous_headings":"Dataset","what":"Prepare the input data","title":"ORA enrichment - single cell metabolomics","text":"","code":"scm = NASH_scm$scm %>%    as.matrix() %>%    t() conds = NASH_scm$metadata %>%   column_to_rownames(\"Cell\") conds = conds[colnames(scm),]  conds_unique = conds %>%    dplyr::distinct()  metaspace_annotations = metaspace_annotations %>%    dplyr::left_join(condition_metadata, by = c(\"ds_name\" = \"dataset_name\")) %>%   dplyr::rename(\"Replicate\" = \"Condition\") %>%   dplyr::left_join(conds_unique)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/articles/ORA_enrichment-single_cell_metabolomics.html","id":"filter-metabolites-and-specify-conditions","dir":"Articles","previous_headings":"Dataset","what":"Filter metabolites and specify conditions","title":"ORA enrichment - single cell metabolomics","text":"specify reference query conditions cond_x cond_y, respectively. since METASPACE provides FDR-controlled annotations, select annotations passing desired_fdr query detected annotations given annotation database (desired_annot_db) custom universe.","code":"cond_x = \"U\" cond_y = \"F\" desired_fdr = 0.1 desired_annot_db = \"HMDB\"  annots_des_fdr = metaspace_annotations %>%   dplyr::filter(Condition %in% c(cond_x, cond_y),                 fdr <= desired_fdr,                 str_detect(db, desired_annot_db)) %>%   pull(formula_adduct) %>%   intersect(rownames(scm))  custom_univ = metaspace_annotations %>%   dplyr::filter(Condition %in% c(cond_x, cond_y),                 str_detect(db, desired_annot_db)) %>%   pull(formula_adduct) %>%   intersect(rownames(scm))  input_scm = scm[annots_des_fdr,]"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/articles/ORA_enrichment-single_cell_metabolomics.html","id":"initialize-enrichment-object","dir":"Articles","previous_headings":"","what":"Initialize enrichment object","title":"ORA enrichment - single cell metabolomics","text":"first step creating S2IsoMEr object contains input matrix scmatrix conditions cell specified conditions. need specify enrichment_type “ORA”. annot_db corresponds annotation database used annotation, relevant annotation performed using METASPACE. databases supported (“CoreMetabolome”, “HMDB”,“SwissLipids”,“LipidMaps”), want provide custom annotation database, can provide using annot_custom_db argument. use “HMDB” annotation database. Since want consider isomeric/isobaric ambiguity, set either consider_isomers consider_isobars TRUE. set FALSE, run classic ORA bootstrapping. also specify polarization_mode positive since datasets acquired positive mode. enrichment background, use background_type argument select one possible background types : LION : Uses LION ontology. Lipids. super_class : coarse-grained classification main_class : Fine-grained sub classification compared super_class sub_class : fine_grained sub classification. pathways : Biological pathways curated KEGG, HMDB, Reactome WikiPathways. also specify background molecule_type specifying either Metabo metabolites Lipid lipids. pull relevant background internally built initEnrichment, can provide previous arguments Load_background function get list terms associated molecules follows : Finally specify condition.x condition.y reference query conditions, respectively. running ORA Run_enrichment, fold changes computed condition.y relative condition.x. additional arguments initEnrichment used depending dataset metadata prior knowledge. Check documentation ?initEnrichment information arguments.","code":"bg = Load_background(mol_type = \"Metabo\",                      bg_type = \"sub_class\",                       feature_type = \"name\") ORA_boot_obj = initEnrichment(scmatrix = input_scm, conditions = conds$Condition,                      enrichment_type = \"ORA\",annot_db = \"HMDB\",                      consider_isomers = T, consider_isobars = T,                      polarization_mode = \"positive\",                      background_type = \"sub_class\",                      molecule_type = \"Metabo\",                      condition.x = cond_x,                      condition.y = cond_y)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/articles/ORA_enrichment-single_cell_metabolomics.html","id":"running-ora-bootstrapping-based-enrichment","dir":"Articles","previous_headings":"","what":"Running ORA bootstrapping-based enrichment","title":"ORA enrichment - single cell metabolomics","text":"Based initialized object, provide Run_enrichment function wrapper around main enrichment functions : Run_bootstrap_ORA() Run_simple_ORA() Run_bootstrap_MSEA() Run_simple_MSEA() can also provide additional arguments Run_enrichment argument list relevant function list. example, Run_enrichment first calculate log fold change separate metabolites upregulated downregulated Run_DE set FALSE. set TRUE, function seurat_WilcoxDETest (wrapper WilcoxDETest Seurat) used calculate p-values based wilcoxon rank-sum test used addition previously computed log fold changes select markers ORA based DE_pval_cutoff DE_LFC_cutoff arguments Run_enrichment function. min.pct.diff argument 0.1 specifies marker must least 10% difference detection cells conditions considered differentially abundant. additional list arguments Run_bootstrap_ORA recommend defining following arguments Run_enrichment : custom_universe : List background metabolites used. specifically, represent set possible metabolites measured given dataset (optionally given threshold). provided, metabolites selected background used might lead potentially misleading results. report_ambiguity_scores : Useful understand degree isomeric/isobaric ambiguity per metabolite. n_bootstraps: Number bootstrap iterations. default 50, increasing number generally improves accuracy, though slow process. Adjust according needs. recommend minimum 50 maximum 1000. 100 acceptable.","code":"ORA_boot_res = Run_enrichment(object = ORA_obj,                          custom_universe = custom_univ,                          report_ambiguity_scores = T,                          DE_LFC_cutoff = 0,min.pct.diff = 0)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/articles/ORA_enrichment-single_cell_metabolomics.html","id":"output","dir":"Articles","previous_headings":"","what":"Output","title":"ORA enrichment - single cell metabolomics","text":"main output Run_bootstrap_ORA list 2 dataframes : “unfiltered_enrich_res” (ORA_boot_res[[\"unfiltered_enrich_res\"]]) : Data frame containing enrichment results term bootstrap contingency table used ORA. “clean_enrich_res” (ORA_boot_res[[\"clean_enrich_res\"]]): Summary statistics per term passing filters specified Run_bootstrap_ORA Check ?Run_bootstrap_ORA information output parameters. Since used Run_enrichment wrapper around Run_bootstrap_ORA get ORA results separately upregulated, downregulated, metabolites based calculated DE_LFC_cutoff specified . use Run_bootstrap_ORA directly, can provide list multiple conditions input directly long know markers priori. get summary terms passing filter, can call passed_filters_per_term function unfiltered dataframe combinations filters understand given term excluded final summarized results. Check ?passed_filters_per_term information filters.","code":"enrich_ORA_summary = passed_filters_per_term(unfiltered_df = ORA_boot_res$upregulated$unfiltered_enrich_res,                         enrich_type = \"ORA\", min_intersection = 3,alpha_cutoff = 0.05,q.val_cutoff = 0.2,boot_fract_cutoff = 0.5) enrich_ORA_summary = enrich_ORA_summary[order(enrich_ORA_summary$pass_all_filts, decreasing = T),] head(enrich_ORA_summary)"},{"path":[]},{"path":"https://alexandrovteam.github.io/S2IsoMEr/articles/ORA_enrichment-single_cell_metabolomics.html","id":"barplot","dir":"Articles","previous_headings":"Visualization","what":"Barplot","title":"ORA enrichment - single cell metabolomics","text":"","code":"barplot_ORA_boot(ORA_boot_res = ORA_boot_res,collapse_multi_cond = T)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/articles/ORA_enrichment-single_cell_metabolomics.html","id":"dotplot","dir":"Articles","previous_headings":"Visualization","what":"Dotplot","title":"ORA enrichment - single cell metabolomics","text":"","code":"multi_cond_collapse = collapse_ORA_boot_multi_cond(ORA_boot_res_list = ORA_boot_res) dotplot_ORA(ORA_res = multi_cond_collapse$clean_enrich_res)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/articles/ORA_enrichment-single_cell_metabolomics.html","id":"ridge-plots","dir":"Articles","previous_headings":"Visualization","what":"Ridge plots","title":"ORA enrichment - single cell metabolomics","text":"compare distribution term/query overlap size across bootstraps can plot distribution overlap size across terms interest. use ridge_bootstraps function plot distribution terms enriched upregulated downregulated markers found multi_cond_collapse using upregulated results .","code":"ridge_bootstraps(enrich_res = multi_cond_collapse$unfiltered_enrich_res,                  terms_of_interest = c(multi_cond_collapse$clean_enrich_res$Term),                  condition = \"upregulated\")"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/articles/ORA_enrichment-single_cell_metabolomics.html","id":"comparative-distribution-of-marker-ions","dir":"Articles","previous_headings":"Visualization","what":"Comparative distribution of marker ions","title":"ORA enrichment - single cell metabolomics","text":"also provide simple function get TP markers associated given term correspond input ion input_scm matrix used input. can select ion interest check distribution intensities specified conditions using compare_metabo_distr function takes ORA_boot_obj input, ions conditions interest.","code":"TP_ions = get_TP_markers_per_Term(ORA_boot_df = ORA_boot_res$downregulated$unfiltered_enrich_res,                                   term_of_interest = \"Glycerophosphocholines\") TP_ions = map_TP_markers_to_ions(markers = TP_ions,                                  scm_ions = rownames(input_scm)) compare_metabo_distr(ORA_boot_obj, metabolite = TP_ions[5],                      conds_of_interest = c(cond_x, cond_y))"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bishoy Wadie. Author, maintainer. Martijn Molenaar. Author. Theodore Alexandrov. Copyright holder, funder.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wadie B, Molenaar M (2024). S2IsoMEr: Spatial Single-Cell Isomeric Metabolite Enrichment R. R package version 0.4.0, https://alexandrovteam.github.io/S2IsoMEr/.","code":"@Manual{,   title = {S2IsoMEr: Spatial and Single-Cell Isomeric Metabolite Enrichment in R},   author = {Bishoy Wadie and Martijn Molenaar},   year = {2024},   note = {R package version 0.4.0},   url = {https://alexandrovteam.github.io/S2IsoMEr/}, }"},{"path":[]},{"path":"https://alexandrovteam.github.io/S2IsoMEr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Spatial and Single-Cell Isomeric Metabolite Enrichment in R","text":"S2IsoMEr R package metabolite enrichment analysis imaging MS. S2IsoMEr can applied spatial single-cell metabolomics datasets addresses challenge metabolite identification ambiguity. key idea handle molecular isomers /isobars propagate molecular ambiguity enrichment results follows: apply iterative random sampling (bootstrapping), perform enrichment analysis iteration, report summarized results.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Spatial and Single-Cell Isomeric Metabolite Enrichment in R","text":"","code":"install.packages(\"devtools\") devtools::install_github(\"alexandrovteam/S2IsoMEr\")"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Spatial and Single-Cell Isomeric Metabolite Enrichment in R","text":"S2IsoMEr supports overrepresentation analysis (ORA) metabolite set enrichment analysis (MSEA) metabolite lipid-based backgrounds. Metabolite backgrounds curated RAMP-DB 2.0, encompassing biological pathways metabolic classes, categorized super, main, sub-classes. pathways RAMP-DB integrate multiple resources, including SMPDB, Reactome, KEGG, WikiPathways. lipids, similar background types provided, addition LION lipid ontology. Except LION ontology, term mapped either molecule names sum formulas, allowing enrichment analysis performed without consideration isomeric/isobaric ambiguity.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/index.html","id":"licence","dir":"","previous_headings":"","what":"Licence","title":"Spatial and Single-Cell Isomeric Metabolite Enrichment in R","text":"S2IsoMEr licensed MIT License. See LICENSE file details.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Spatial and Single-Cell Isomeric Metabolite Enrichment in R","text":"Check preprint bioRxiv: Enrichment analysis spatial single-cell metabolomics accounting molecular ambiguity.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Load_background.html","id":null,"dir":"Reference","previous_headings":"","what":"Load enrichment background — Load_background","title":"Load enrichment background — Load_background","text":"Load_background() retrieves list terms associated metabolites enrichment based requested molecule type, background type input feature type.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Load_background.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load enrichment background — Load_background","text":"","code":"Load_background(   mol_type = c(\"Lipid\", \"Metabo\"),   bg_type = c(\"LION\", \"main_class\", \"super_class\", \"sub_class\", \"pathways\"),   feature_type = c(\"sf\", \"name\") )"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Load_background.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load enrichment background — Load_background","text":"mol_type Character indicating molecule type. Can either Lipid Lipids Metabo small molecules bg_type Character indicating background type : \"LION\" LION ontology lipids . \"main_class\" Level 1 classification - finer classification compared super_class. \"super_class\" Level 0 classification. \"sub_class\" Level 2 classification - finer classification compared main_class. \"pathways\" Biological pathways based KEGG, Reactome, SMPDB. feature_type Character indicating input feature type. Can either sf sum formula ion name molecule name.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Load_background.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load enrichment background — Load_background","text":"List element name correspond given term values either metabolite names sum formulas.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Load_background.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load enrichment background — Load_background","text":"","code":"if (FALSE) { # \\dontrun{ bg <- Load_background(mol_type = \"Metabo\",                    bg_type = \"main_class\",                    feature_type = \"name\") } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_bootstrap_MSEA.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Bootstrapped Metabolite Set Enrichment Analysis (MSEA) — Run_bootstrap_MSEA","title":"Run Bootstrapped Metabolite Set Enrichment Analysis (MSEA) — Run_bootstrap_MSEA","text":"function performs bootstrapped metabolite set enrichment analysis given dataset. ensures ranking conditions set properly conducts enrichment analysis using either KS-signed method fgsea.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_bootstrap_MSEA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Bootstrapped Metabolite Set Enrichment Analysis (MSEA) — Run_bootstrap_MSEA","text":"","code":"Run_bootstrap_MSEA(   object,   n_bootstraps = 50,   min_pathway_size = 3,   report_ambiguity_scores = F,   boot_fract_cutoff = 0.5 )"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_bootstrap_MSEA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Bootstrapped Metabolite Set Enrichment Analysis (MSEA) — Run_bootstrap_MSEA","text":"object S2IsoMEr object initialized initEnrichment containing necessary data parameters, including annotations, annotation weights, rankings, pathway list, additional settings. n_bootstraps integer specifying number bootstrap samples generate. min_pathway_size integer specifying minimum number metabolites must present given term considered. report_ambiguity_scores logical value indicating whether calculate report ambiguity scores annotations. boot_fract_cutoff numeric value specifying minimum fraction bootstraps pathway must appear considered final results.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_bootstrap_MSEA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Bootstrapped Metabolite Set Enrichment Analysis (MSEA) — Run_bootstrap_MSEA","text":"list containing results enrichment analysis, including: summarized enrichment results per-bootstrap enrichment results number bootstraps fraction matched pathway comparison conditions annotation ambiguity scores calculated","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_bootstrap_MSEA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Bootstrapped Metabolite Set Enrichment Analysis (MSEA) — Run_bootstrap_MSEA","text":"function performs bootstrapped metabolite set enrichment analysis resampling annotations calculating enrichment scores bootstrap sample. handles KS-signed method fgsea methods enrichment analysis returns comprehensive summary results.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_bootstrap_MSEA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run Bootstrapped Metabolite Set Enrichment Analysis (MSEA) — Run_bootstrap_MSEA","text":"Korotkevich G, Sukhov V, Sergushichev (2019). “Fast gene set enrichment analysis.” bioRxiv. doi:10.1101/060012, http://biorxiv.org/content/early/2016/06/20/060012. Napoli F (2017). “signed-ks-test.” https://github.com/franapoli/signed-ks-test/blob/master/signed-ks-test.R.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_bootstrap_MSEA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Bootstrapped Metabolite Set Enrichment Analysis (MSEA) — Run_bootstrap_MSEA","text":"","code":"if (FALSE) { # \\dontrun{ data(\"example_MSEA_obj\") result <- Run_bootstrap_MSEA(object = example_MSEA_obj, n_bootstraps = 50) } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_bootstrap_ORA.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function for Bootstrap Over-Representation Analysis (ORA) — Run_bootstrap_ORA","title":"Wrapper function for Bootstrap Over-Representation Analysis (ORA) — Run_bootstrap_ORA","text":"function performs bootstrap-based -representation analysis (ORA) given list metabolites background.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_bootstrap_ORA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function for Bootstrap Over-Representation Analysis (ORA) — Run_bootstrap_ORA","text":"","code":"Run_bootstrap_ORA(   marker_list,   background,   custom_universe = NULL,   alpha_cutoff = 0.05,   min_intersection = 3,   consider_isobars = T,   polarization_mode = NA,   mass_range_ppm = 3,   annot_db = \"HMDB\",   annot_custom_db = NULL,   use_LION = F,   endogenous_only = T,   pathway_assoc_only = F,   remove_expected_predicted = T,   annot_list = NULL,   annot_weights = NULL,   n_bootstraps = 50,   boot_fract_cutoff = 0.5,   q.val_cutoff = 0.2,   selected_terms = NULL,   adjust_contingency = T,   report_ambiguity_scores = F )"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_bootstrap_ORA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function for Bootstrap Over-Representation Analysis (ORA) — Run_bootstrap_ORA","text":"marker_list vector list marker sets analyze. background list named terms term character vector metabolites. custom_universe optional vector specifying custom universe terms. provided metabolites background used universe. alpha_cutoff numeric value indicating alpha cutoff significance. min_intersection integer specifying minimum intersection required input list given term background. consider_isobars logical indicating whether consider isobars. polarization_mode parameter polarization mode. provided, used consider isomers isobars. mass_range_ppm numeric value mass range parts per million (ppm). annot_db character string specifying annotation database(s) used annotation. Check  build_iso_bg information. annot_custom_db optional custom annotation database. provided, used alongside instead specified annotation database. use_LION logical indicating whether use LION ontology select isomers/isobars background. endogenous_only logical indicating whether consider endogenous compounds. Applies HMDB CoreMetabolome annotation databases. pathway_assoc_only logical indicating whether consider pathway-associated compounds. Applies HMDB CoreMetabolome annotation databases. remove_expected_predicted logical indicating whether remove expected predicted annotations. Applies HMDB CoreMetabolome annotation databases. annot_list optional list annotations. provided, used instead generating isomers built-formula molecule mapping. annot_weights optional list annotation weights. provided, used ambiguity score calculation bootstrap analysis. n_bootstraps integer specifying number bootstrap iterations. boot_fract_cutoff numeric value specifying minimum bootstrap fraction cutoff required. Default 0.5 . q.val_cutoff numeric value specifying q-value cutoff significance. selected_terms optional vector selected terms focus . provided, analysis restricted terms. adjust_contingency logical indicating whether adjust contingency table account isomeric ambiguity. report_ambiguity_scores logical indicating whether report ambiguity scores. TRUE, ambiguity scores included results.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_bootstrap_ORA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function for Bootstrap Over-Representation Analysis (ORA) — Run_bootstrap_ORA","text":"list containing ORA results group markers. filtered per-bootstrap results provided.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_bootstrap_ORA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper function for Bootstrap Over-Representation Analysis (ORA) — Run_bootstrap_ORA","text":"","code":"if (FALSE) { # \\dontrun{ data(\"example_ORA_markers\") data(\"example_ORA_obj\") object = example_ORA_obj enrich_res <- Run_bootstrap_ORA(   marker_list = example_ORA_markers,   background = object$pathway_list,   polarization_mode = object$polarization_mode,   mass_range_ppm = object$mass_range_ppm,   annot_db = object$Annotation_database,   annot_custom_db = object$Custom_database,   use_LION = ifelse(stringr::str_detect(object$background_name, \"LION\"), TRUE, FALSE),   endogenous_only = object$endogenous_only,   pathway_assoc_only = object$pathway_assoc_only,   remove_expected_predicted = object$remove_expected_predicted,   annot_weights = object$annotation.weights,   consider_isobars = object$consider_isobars,   annot_list = object$annotations ) } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_enrichment.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Metabolite/Lipids enrichment analysis for single cell metabolomics — Run_enrichment","title":"Run Metabolite/Lipids enrichment analysis for single cell metabolomics — Run_enrichment","text":"Run_enrichment() wrapper run either ORA MSEA based initialized enrichment object","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_enrichment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Metabolite/Lipids enrichment analysis for single cell metabolomics — Run_enrichment","text":"","code":"Run_enrichment(   object,   Run_DE = FALSE,   DE_pval_cutoff = 0.05,   DE_LFC_cutoff = 1,   min.pct.diff = 0.1,   ... )"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_enrichment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Metabolite/Lipids enrichment analysis for single cell metabolomics — Run_enrichment","text":"object numeric matrix n metabolites (rows) m cells measurments (columns). Run_DE logical indicating whether run differential analysis using limma's rank Sum Test Correlation. Ignored enrichment type 'MSEA'. DE_pval_cutoff numeric indicating p-value cutoff. Default 0.05. DE_LFC_cutoff numeric indicating minimum log2 fold change differential analysis min.pct.diff numeric indicating minimum percentage difference samples/cells conditions marker considered differentially abundant. ... Additional arguments passed functions used internally, Run_bootstrap_ORA, Run_simple_ORA, Run_bootstrap_MSEA, Run_simple_MSEA. Consult specific function documentation details arguments.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_enrichment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Metabolite/Lipids enrichment analysis for single cell metabolomics — Run_enrichment","text":"Data.frame enrichment results","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_enrichment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Metabolite/Lipids enrichment analysis for single cell metabolomics — Run_enrichment","text":"","code":"if (FALSE) { # \\dontrun{ data(\"example_ORA_obj\") data(\"example_ORA_custom_universe\") input_scm = example_ORA_obj$scmatrix conds = example_ORA_obj$conditions cond_x = \"U\" cond_y = \"F\" ORA_obj <- initEnrichment(   scmatrix = input_scm,   conditions = conds,   enrichment_type = \"ORA\",   annot_db = \"HMDB\",   consider_isomers = TRUE,   consider_isobars = TRUE,   polarization_mode = \"positive\",   background_type = \"sub_class\",   molecule_type = \"Metabo\",   condition.x = cond_x,   condition.y = cond_y ) ORA_res <- Run_enrichment(   object = ORA_obj,   custom_universe = example_ORA_custom_universe,   report_ambiguity_scores = TRUE,   DE_LFC_cutoff = 0,   min.pct.diff = 0 ) } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_simple_MSEA.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Simple Metabolite Set Enrichment Analysis (MSEA) — Run_simple_MSEA","title":"Run Simple Metabolite Set Enrichment Analysis (MSEA) — Run_simple_MSEA","text":"function performs simple metabolite set enrichment analysis given dataset. ensures ranking conditions set properly conducts enrichment analysis using either KS-signed method fgsea.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_simple_MSEA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Simple Metabolite Set Enrichment Analysis (MSEA) — Run_simple_MSEA","text":"","code":"Run_simple_MSEA(object, min_pathway_size = 3)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_simple_MSEA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Simple Metabolite Set Enrichment Analysis (MSEA) — Run_simple_MSEA","text":"object S2IsoMEr object initialized initEnrichment containing necessary data parameters, including annotations, annotation weights, rankings, pathway list, additional settings. min_pathway_size integer specifying minimum number metabolites must present given term considered.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_simple_MSEA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Simple Metabolite Set Enrichment Analysis (MSEA) — Run_simple_MSEA","text":"list containing results enrichment analysis, including: enrichment results comparison conditions","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_simple_MSEA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Simple Metabolite Set Enrichment Analysis (MSEA) — Run_simple_MSEA","text":"function performs bootstrapped metabolite set enrichment analysis resampling annotations calculating enrichment scores bootstrap sample. handles KS-signed method](https://github.com/franapoli/signed-ks-test/blob/master/signed-ks-test.R) fgsea methods enrichment analysis returns comprehensive summary results.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_simple_MSEA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run Simple Metabolite Set Enrichment Analysis (MSEA) — Run_simple_MSEA","text":"Korotkevich G, Sukhov V, Sergushichev (2019). “Fast gene set enrichment analysis.” bioRxiv. doi:10.1101/060012, http://biorxiv.org/content/early/2016/06/20/060012. Napoli F (2017). “signed-ks-test.” https://github.com/franapoli/signed-ks-test/blob/master/signed-ks-test.R.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_simple_MSEA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Simple Metabolite Set Enrichment Analysis (MSEA) — Run_simple_MSEA","text":"","code":"if (FALSE) { # \\dontrun{ data(\"example_MSEA_obj\") result <- Run_simple_MSEA(object = example_MSEA_obj, n_bootstraps = 50) } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_simple_ORA.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function for Simple Over-Representation Analysis (ORA) — Run_simple_ORA","title":"Wrapper function for Simple Over-Representation Analysis (ORA) — Run_simple_ORA","text":"function performs simple -representation analysis (ORA) given list metabolites background.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_simple_ORA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function for Simple Over-Representation Analysis (ORA) — Run_simple_ORA","text":"","code":"Run_simple_ORA(   marker_list,   background,   custom_universe = NULL,   alpha_cutoff = 0.05,   min_intersection = 3 )"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_simple_ORA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function for Simple Over-Representation Analysis (ORA) — Run_simple_ORA","text":"marker_list vector list marker sets analyze. background list named terms term character vector metabolites. custom_universe optional vector specifying custom universe terms. provided metabolites background used universe. alpha_cutoff numeric value indicating alpha cutoff significance. min_intersection integer specifying minimum intersection required input list given term background.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_simple_ORA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function for Simple Over-Representation Analysis (ORA) — Run_simple_ORA","text":"dataframe containing ORA results group markers.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/Run_simple_ORA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper function for Simple Over-Representation Analysis (ORA) — Run_simple_ORA","text":"","code":"if (FALSE) { # \\dontrun{ data(\"example_ORA_markers\") bg = Load_background(mol_type = \"Metabo\",bg_type = \"main_class\",feature_type = \"sf\") enrich_res = Run_simple_ORA(marker_list = example_ORA_markers,background = bg) } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/S2IsoMEr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"S2IsoMEr: Spatial and Single-Cell Isomeric Metabolite Enrichment in R — S2IsoMEr-package","title":"S2IsoMEr: Spatial and Single-Cell Isomeric Metabolite Enrichment in R — S2IsoMEr-package","text":"R package performing Overrepresentation analysis (ORA) Metabolite Set Enrichment Analysis (MSEA) Spatial single-cell metabolomics datasets using bootstrapping isomeric/isobaric molecules.","code":""},{"path":[]},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/S2IsoMEr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"S2IsoMEr: Spatial and Single-Cell Isomeric Metabolite Enrichment in R — S2IsoMEr-package","text":"Maintainer: Bishoy Wadie bishoy.wadie@embl.de (ORCID) Authors: Martijn Molenaar m.r.molenaar@protonmail.com (ORCID) contributors: Theodore Alexandrov talexandrov@health.ucsd.edu (ORCID) [copyright holder, funder]","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/barplot_MSEA_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot bootstrap enrichment analysis — barplot_MSEA_boot","title":"Plot bootstrap enrichment analysis — barplot_MSEA_boot","text":"Plot bootstrap enrichment analysis","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/barplot_MSEA_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot bootstrap enrichment analysis — barplot_MSEA_boot","text":"","code":"barplot_MSEA_boot(   object,   min.annotations = 2,   q.value.cutoff = 0.1,   bootstrap.fraction.cutoff = 0.5,   by.statistic = \"ES\" )"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/barplot_MSEA_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot bootstrap enrichment analysis — barplot_MSEA_boot","text":"object S2IsoMEr object enrichment analysis. min.annotations integer describing minimal number annotations term include q.value.cutoff numeric 0 1. terms q-values lower value displayed. bootstrap.fraction.cutoff numeric 0 1 (default = 0.5), indicating minimal fraction metabolite set present bootstrap iterations. .statistic character indicating x-axis arranged. Can either 'ES' (enrichment score) 'q.value' (default).","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/barplot_MSEA_boot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot bootstrap enrichment analysis — barplot_MSEA_boot","text":"ggplot2 object.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/barplot_MSEA_boot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot bootstrap enrichment analysis — barplot_MSEA_boot","text":"","code":"if (FALSE) { # \\dontrun{ data(\"example_MSEA_obj\") p = barplot_MSEA_boot(object = example_MSEA_obj,       q.value.cutoff = 0.2, by.statistic = \"ES\") } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/barplot_ORA_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bar Plot for ORA Bootstrapped Results — barplot_ORA_boot","title":"Bar Plot for ORA Bootstrapped Results — barplot_ORA_boot","text":"function creates bar plot -Representation Analysis (ORA) bootstrapped results, including error bars show range enrichment scores () indicating significance based q-values.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/barplot_ORA_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bar Plot for ORA Bootstrapped Results — barplot_ORA_boot","text":"","code":"barplot_ORA_boot(ORA_boot_res, collapse_multi_cond = F)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/barplot_ORA_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bar Plot for ORA Bootstrapped Results — barplot_ORA_boot","text":"ORA_boot_res list containing ORA bootstrapped results. list include unfiltered_enrich_res clean_enrich_res data frames. collapse_multi_cond logical value indicating whether collapse results across multiple conditions. Default FALSE.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/barplot_ORA_boot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bar Plot for ORA Bootstrapped Results — barplot_ORA_boot","text":"ggplot object displaying bar plot ORA bootstrapped results.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/barplot_ORA_boot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bar Plot for ORA Bootstrapped Results — barplot_ORA_boot","text":"function creates bar plot terms reordered median enrichment scores. Bars filled colors representing combined q-values, error bars show minimum maximum enrichment scores (ES_min ES_max) across bootstraps. number true positives (n) included term labels.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/barplot_ORA_boot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bar Plot for ORA Bootstrapped Results — barplot_ORA_boot","text":"","code":"if (FALSE) { # \\dontrun{ data(\"example_ORA_obj\") data(\"example_ORA_custom_universe\") input_scm = example_ORA_obj$scmatrix conds = example_ORA_obj$conditions cond_x = \"U\" cond_y = \"F\" ORA_obj <- initEnrichment(   scmatrix = input_scm,   conditions = conds,   enrichment_type = \"ORA\",   annot_db = \"HMDB\",   consider_isomers = TRUE,   consider_isobars = TRUE,   polarization_mode = \"positive\",   background_type = \"sub_class\",   molecule_type = \"Metabo\",   condition.x = cond_x,   condition.y = cond_y ) ORA_res <- Run_enrichment(   object = ORA_obj,   custom_universe = example_ORA_custom_universe,   report_ambiguity_scores = TRUE,   DE_LFC_cutoff = 0,   min.pct.diff = 0 ) p = barplot_ORA_boot(ORA_boot_res = ORA_res,collapse_multi_cond = T) } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/barplot_ORA_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Bar Plot for Simple ORA Results — barplot_ORA_simple","title":"Bar Plot for Simple ORA Results — barplot_ORA_simple","text":"function creates bar plot simple (bootstraps) -Representation Analysis (ORA) results, indicating significance terms based q-value cutoff.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/barplot_ORA_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bar Plot for Simple ORA Results — barplot_ORA_simple","text":"","code":"barplot_ORA_simple(ORA_simple_res, q_val_cutoff = 0.05)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/barplot_ORA_simple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bar Plot for Simple ORA Results — barplot_ORA_simple","text":"ORA_simple_res data frame containing ORA results. q_val_cutoff numeric value specifying q-value cutoff significance. Default 0.05.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/barplot_ORA_simple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bar Plot for Simple ORA Results — barplot_ORA_simple","text":"ggplot object displaying bar plot ORA results.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/barplot_ORA_simple.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bar Plot for Simple ORA Results — barplot_ORA_simple","text":"function creates bar plot terms reordered scores descending order. Bars colored based whether term's score negative log10 q-value cutoff. dashed line indicates cutoff significance.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/barplot_ORA_simple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bar Plot for Simple ORA Results — barplot_ORA_simple","text":"","code":"if (FALSE) { # \\dontrun{ data(\"example_ORA_markers\") bg = Load_background(mol_type = \"Metabo\",bg_type = \"main_class\",feature_type = \"sf\") enrich_res = Run_simple_ORA(marker_list = example_ORA_markers,background = bg) p = barplot_ORA_simple(enrich_res, q_val_cutoff = 0.2) } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/build_iso_bg.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Isomer/Isobar Background — build_iso_bg","title":"Build Isomer/Isobar Background — build_iso_bg","text":"function constructs isomeric/isobaric background database based specified annotation databases additional filtering criteria.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/build_iso_bg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Isomer/Isobar Background — build_iso_bg","text":"","code":"build_iso_bg(   annot_db = \"HMDB\",   annot_custom_db = NULL,   use_LION = F,   endogenous_only = T,   pathway_assoc_only = F,   remove_expected_predicted = T )"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/build_iso_bg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Isomer/Isobar Background — build_iso_bg","text":"annot_db character vector specifying annotation databases use. Options include \"HMDB\", \"LipidMaps\", \"SwissLipids\", \"CoreMetabolome\". annot_custom_db custom annotation database. NULL, custom database used instead specified annotation databases. use_LION logical indicating whether use LION ontology internal LipidMaps backgrounds \"LipidMaps\" included annot_db. endogenous_only logical indicating whether include endogenous metabolites. Applies \"HMDB\" \"CoreMetabolome\". pathway_assoc_only logical indicating whether include metabolites associated pathways. Applies \"HMDB\" \"CoreMetabolome\". remove_expected_predicted logical indicating whether remove metabolites status \"expected\" \"predicted\" HMDB CoreMetabolome databases.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/build_iso_bg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Isomer/Isobar Background — build_iso_bg","text":"data frame containing isomers isobers background based specified criteria.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/build_iso_bg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build Isomer/Isobar Background — build_iso_bg","text":"function builds isomer/isobar background either using specified annotation databases provided custom annotation database. Various filtering options available refine background.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/build_iso_bg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build Isomer/Isobar Background — build_iso_bg","text":"","code":"if (FALSE) { # \\dontrun{ iso_bg <- build_iso_bg(annot_db = \"HMDB\", use_LION = FALSE, endogenous_only = TRUE,                        pathway_assoc_only = FALSE, remove_expected_predicted = TRUE) custom_db <- data.frame(   ID = 1:3,   Name = c(\"Met1\", \"Met2\", \"Met3\"),   Endogenous = \"Yes\",   Pathway_assoc = \"Yes\",   HMDB_status = \"known\" ) iso_bg_custom <- build_iso_bg(annot_custom_db = custom_db) } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/calc_LFC_scmat.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Log Fold Change (LFC) from Single-Cell Metabolomics Matrix — calc_LFC_scmat","title":"Calculate Log Fold Change (LFC) from Single-Cell Metabolomics Matrix — calc_LFC_scmat","text":"method calculates Log Fold Change (LFC) two conditions single-cell metabolomics matrix. compares mean metabolite expression levels specified conditions returns LFC values metabolite.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/calc_LFC_scmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Log Fold Change (LFC) from Single-Cell Metabolomics Matrix — calc_LFC_scmat","text":"","code":"calc_LFC_scmat(object)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/calc_LFC_scmat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Log Fold Change (LFC) from Single-Cell Metabolomics Matrix — calc_LFC_scmat","text":"object S2IsoMEr object contains single-cell metabolomics matrix (scmatrix) metadata conditions (conditions, condition.x, condition.y).","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/calc_LFC_scmat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Log Fold Change (LFC) from Single-Cell Metabolomics Matrix — calc_LFC_scmat","text":"numeric vector Log Fold Change (LFC) values metabolite. length vector matches number metabolites matrix.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/calc_LFC_scmat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Log Fold Change (LFC) from Single-Cell Metabolomics Matrix — calc_LFC_scmat","text":"method computes mean expression levels metabolites two conditions specified S2IsoMEr object. LFC calculated difference log2-transformed mean expression levels two conditions.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/calc_LFC_scmat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Log Fold Change (LFC) from Single-Cell Metabolomics Matrix — calc_LFC_scmat","text":"","code":"if (FALSE) { # \\dontrun{ data(\"example_ORA_obj\") lfc_values <- calc_LFC_scmat(example_ORA_obj) } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/compare_metabo_distr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot intensity distribution of metabolite across conditions — compare_metabo_distr","title":"Plot intensity distribution of metabolite across conditions — compare_metabo_distr","text":"Plot intensity distribution metabolite across conditions","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/compare_metabo_distr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot intensity distribution of metabolite across conditions — compare_metabo_distr","text":"","code":"compare_metabo_distr(obj, metabolite, conds_of_interest = NULL)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/compare_metabo_distr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot intensity distribution of metabolite across conditions — compare_metabo_distr","text":"obj S2IsoMEr object enrichment analysis. metabolite character indicating metabolite name conds_of_interest Optional. character vector specifying conditions include plot. NULL (default), conditions included.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/compare_metabo_distr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot intensity distribution of metabolite across conditions — compare_metabo_distr","text":"ggplot2 object displaying density plot metabolite intensities across conditions.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/compare_metabo_distr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot intensity distribution of metabolite across conditions — compare_metabo_distr","text":"","code":"if (FALSE) { # \\dontrun{ data(\"example_ORA_obj\") data(\"example_ORA_custom_universe\") input_scm = example_ORA_obj$scmatrix conds = example_ORA_obj$conditions cond_x = \"U\" cond_y = \"F\" ORA_obj <- initEnrichment(   scmatrix = input_scm,   conditions = conds,   enrichment_type = \"ORA\",   annot_db = \"HMDB\",   consider_isomers = TRUE,   consider_isobars = TRUE,   polarization_mode = \"positive\",   background_type = \"sub_class\",   molecule_type = \"Metabo\",   condition.x = cond_x,   condition.y = cond_y ) ORA_res <- Run_enrichment(   object = ORA_obj,   custom_universe = example_ORA_custom_universe,   report_ambiguity_scores = TRUE,   DE_LFC_cutoff = 0,   min.pct.diff = 0 ) TP_ions = get_TP_markers_per_Term(ORA_boot_df = ORA_res$downregulated$unfiltered_enrich_res,                                  term_of_interest = \"Glycerophosphocholines\") TP_ions = map_TP_markers_to_ions(markers = TP_ions,scm_ions = rownames(input_scm)) p = compare_metabo_distr(ORA_obj, metabolite = TP_ions[5],                          conds_of_interest = c(cond_x, cond_y)) } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/decouple_ORA_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Run ORA Analysis with Optional Bootstrapping — decouple_ORA_wrapper","title":"Run ORA Analysis with Optional Bootstrapping — decouple_ORA_wrapper","text":"function performs -representation analysis (ORA) given list markers using either bootstrapped simple method. wrapper around run_ora function decoupleR package. function also used internally Run_bootstrap_ORA Run_simple_ORA functions.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/decouple_ORA_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run ORA Analysis with Optional Bootstrapping — decouple_ORA_wrapper","text":"","code":"decouple_ORA_wrapper(   marker_list,   term_list,   universe,   pass_adjust = F,   seed = 42,   ORA_boot = T )"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/decouple_ORA_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run ORA Analysis with Optional Bootstrapping — decouple_ORA_wrapper","text":"marker_list list metabolites per condition. conditions, please provide list(\"condition\" = c(\"metabo_1\", \"metabo_2\", ...)) term_list list named terms term character vector metabolites. universe character vector specifying universe metabolites. pass_adjust logical indicating whether pass adjustment parameter ORA function. TRUE, contingency table adjusted. required bootstrap-ORA. seed integer specifying seed reproducibility. ORA_boot logical indicating whether use bootstrapped ORA. TRUE, function use bootstrapped ORA method; otherwise, use simple ORA method.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/decouple_ORA_wrapper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run ORA Analysis with Optional Bootstrapping — decouple_ORA_wrapper","text":"list containing two elements: ORA_res data frame ORA results, including columns statistic, source, condition, score, p-value. ORA_conting data frame ORA contingency table, including columns source, condition, TP, FP, FN, TN.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/decouple_ORA_wrapper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run ORA Analysis with Optional Bootstrapping — decouple_ORA_wrapper","text":"function wrapper around run_ora function decoupleR package. details, please refer decoupleR documentation.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/decouple_ORA_wrapper.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run ORA Analysis with Optional Bootstrapping — decouple_ORA_wrapper","text":"Badia--Mompel, P., Nagai, J. S., & Saez-Rodriguez, J. (2022). decoupleR: flexible tool handle various modes biological network analysis. Bioinformatics Advances, 2(1), vbac016. https://doi.org/10.1093/bioadv/vbac016","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/decouple_ORA_wrapper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run ORA Analysis with Optional Bootstrapping — decouple_ORA_wrapper","text":"","code":"if (FALSE) { # \\dontrun{ marker_list <- c(\"B2\", \"B5\", \"B8\") term_list <- list(   \"Term1\" = c(\"B1\", \"B2\", \"B3\", \"B4\"),   \"Term2\" = c(\"B4\", \"B5\", \"B6\", \"B9\") ) universe <- c(\"B1\", \"B2\", \"B3\", \"B4\", \"B5\", \"B6\", \"B7\", \"B8\", \"B9\") results <- decouple_ORA_wrapper(   marker_list, term_list, universe,   pass_adjust = TRUE, seed = 42, ORA_boot = FALSE ) } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/dotplot_ORA.html","id":null,"dir":"Reference","previous_headings":"","what":"Dot Plot for Over-Representation Analysis (ORA) Results — dotplot_ORA","title":"Dot Plot for Over-Representation Analysis (ORA) Results — dotplot_ORA","text":"function creates dot plot ORA results, options color dots enrichment score significance facet specified variable.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/dotplot_ORA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dot Plot for Over-Representation Analysis (ORA) Results — dotplot_ORA","text":"","code":"dotplot_ORA(   ORA_res,   alpha_cutoff = 0.05,   color_by = \"Significance\",   facet_by = NULL )"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/dotplot_ORA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dot Plot for Over-Representation Analysis (ORA) Results — dotplot_ORA","text":"ORA_res data frame containing ORA results either filtered results output Run_bootstrap_ORA direct output Run_simple_ORA. alpha_cutoff numeric value specifying alpha cutoff significance. Default 0.05. color_by character string indicating whether color dots \"Enrichment_score\" \"Significance\" facet_by optional character string specifying column name facet plot.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/dotplot_ORA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dot Plot for Over-Representation Analysis (ORA) Results — dotplot_ORA","text":"ggplot object displaying dot plot ORA results.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/dotplot_ORA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dot Plot for Over-Representation Analysis (ORA) Results — dotplot_ORA","text":"function creates dot plot size dots represents size term (e.g., number true positives), color represents either enrichment score significance (-log10 p-value). multiple conditions present, plot adjusted accordingly. plot can also faceted specified variable.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/dotplot_ORA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dot Plot for Over-Representation Analysis (ORA) Results — dotplot_ORA","text":"","code":"if (FALSE) { # \\dontrun{ data(\"example_ORA_obj\") data(\"example_ORA_custom_universe\") input_scm = example_ORA_obj$scmatrix conds = example_ORA_obj$conditions cond_x = \"U\" cond_y = \"F\" ORA_obj <- initEnrichment(   scmatrix = input_scm,   conditions = conds,   enrichment_type = \"ORA\",   annot_db = \"HMDB\",   consider_isomers = TRUE,   consider_isobars = TRUE,   polarization_mode = \"positive\",   background_type = \"sub_class\",   molecule_type = \"Metabo\",   condition.x = cond_x,   condition.y = cond_y ) ORA_res <- Run_enrichment(   object = ORA_obj,   custom_universe = example_ORA_custom_universe,   report_ambiguity_scores = TRUE,   DE_LFC_cutoff = 0,   min.pct.diff = 0 ) multi_cond_res = collapse_ORA_boot_multi_cond(ORA_boot_res_list = ORA_res) p = dotplot_ORA(ORA_res = multi_cond_res$clean_enrich_res) } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/example_MSEA_multicond.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Multi condition MSEA results — example_MSEA_multicond","title":"Example Multi condition MSEA results — example_MSEA_multicond","text":"example_MSEA_multicond dataset data frame contains results running Run_bootstrap_MSEA multiple pairwise conditions compared reference.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/example_MSEA_multicond.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Multi condition MSEA results — example_MSEA_multicond","text":"","code":"data(example_MSEA_multicond)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/example_MSEA_multicond.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Multi condition MSEA results — example_MSEA_multicond","text":"data frame 100 rows 9 variables: Term Character: Term name metabolite set (e.g. Triacylglycerols) n Numeric: Median term/query overlap size bootstraps. ES_median Numeric: Median NES (normalized enrichment score) fgsea ES ks_signed ES_sd Numeric: stadndard deviation NES (normalized enrichment score) fgsea ES ks_signed p.value_combined Numeric: Combined p-value using metap::sumlog q.value_combined Numeric: Combined adjusted p-value using metap::sumlog fraction.bootstrap.presence Numeric: Proportion bootstraps given term tested condition.x Character: Reference condition condition.y Character: Query condition","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/example_MSEA_multicond.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Multi condition MSEA results — example_MSEA_multicond","text":"","code":"# Load the example data frame data(example_MSEA_multicond)  # View the first few rows head(example_MSEA_multicond) #> # A tibble: 6 × 9 #>   Term                      n ES_median  ES_sd p.value_combined q.value_combined #>   <chr>                 <dbl>     <dbl>  <dbl>            <dbl>            <dbl> #> 1 Triacylglycerols         17      1.82 0.0302         1.39e-53         2.00e-39 #> 2 Glycerophosphocholin…    18     -2.41 0.230          4.93e-54         4.38e-39 #> 3 Diradylglycerols          6      1.50 0.0737         3.31e-22         4.83e-19 #> 4 Glycerophosphoethano…     7     -1.36 0.186          5.70e-12         2.13e-11 #> 5 Triacylglycerols         10      2.19 0.0280         5.07e-84         8.31e-60 #> 6 Diradylglycerols          6      1.76 0.128          1.84e-50         3.07e-39 #> # ℹ 3 more variables: fraction.bootstrap.presence <dbl>, condition.x <chr>, #> #   condition.y <chr>"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/example_MSEA_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Example S2IsoMEr MSEA Object — example_MSEA_obj","title":"Example S2IsoMEr MSEA Object — example_MSEA_obj","text":"example_MSEA_obj dataset pre-built S2IsoMEr enrichment object. object created using initEnrichment() function contains necessary parameters performing bootstrapping-based MSEA.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/example_MSEA_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example S2IsoMEr MSEA Object — example_MSEA_obj","text":"","code":"data(example_MSEA_obj)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/example_MSEA_obj.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example S2IsoMEr MSEA Object — example_MSEA_obj","text":"object class S2IsoMEr following components: scmatrix numeric matrix metabolite measurements, rows representing metabolites columns representing cells measurements. polarization_mode Character indicating polarization mode, either \"positive\" \"negative\". enrichment_type Character specifying enrichment analysis type, either \"ORA\" \"MSEA\". Annotation_database Character character vector specifying annotation database(s) used, e.g., \"CoreMetabolome\", \"HMDB\", \"SwissLipids\", \"LipidMaps\". Custom_database Optional custom annotation database provided dataframe two columns: \"formula\" \"molecule name\". annotations list length n, element contains vector isomer names associated metabolite. annotation.weights optional list length n, element containing vector isomer weights. isobars_list list isobaric species, used consider_isobars = TRUE. conditions vector condition identifiers, length equal number columns scmatrix. include logical vector indicating metabolites include analysis. consider_isomers Logical indicating whether isomers considered analysis. consider_isobars Logical indicating whether isobars included analysis. mass_range_ppm Numeric indicating mass range (ppm) isobar identification. background_name Character specifying enrichment background type, either \"custom\" combination molecule background types. endogenous_only Logical indicating whether consider endogenous metabolites. pathway_assoc_only Logical indicating whether include metabolites associated biological pathway. remove_expected_predicted Logical indicating whether remove expected predicted isomers based HMDB status. pathway_list list pathways associated analyzed metabolites. LUT lookup table used annotating metabolites. termsSelection Character specifying terms interest enrichment analysis. condition.x Character specifying first condition identifier pairwise comparison. condition.y Character specifying second condition identifier pairwise comparison. ranking.Character specifying ranking method used MSEA, e.g., \"wilcox.test\", \"t.test\", \"logFC\", \"BWS\". gsea.method Character specifying GSEA method, either \"ks_signed\" \"fgsea\".","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/example_MSEA_obj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example S2IsoMEr MSEA Object — example_MSEA_obj","text":"","code":"# Load the example dataset data(example_MSEA_obj)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/example_ORA_custom_universe.html","id":null,"dir":"Reference","previous_headings":"","what":"Example custom universe for ORA — example_ORA_custom_universe","title":"Example custom universe for ORA — example_ORA_custom_universe","text":"example_ORA_custom_universe character vector ions representing custom universe ORA","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/example_ORA_custom_universe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example custom universe for ORA — example_ORA_custom_universe","text":"","code":"data(example_ORA_custom_universe)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/example_ORA_custom_universe.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example custom universe for ORA — example_ORA_custom_universe","text":"character vector 1618 elements, representing ion (sum formula + adduct)","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/example_ORA_custom_universe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example custom universe for ORA — example_ORA_custom_universe","text":"","code":"# Load the example vector data(example_ORA_custom_universe)  # View the first few elements head(example_ORA_custom_universe) #> [1] \"C21H14O10+Na\"  \"C26H38O4+K\"    \"C40H80NO8P+H\"  \"C24H50NO7P+Na\" #> [5] \"C24H50NO7P+H\"  \"C29H47NO4+Na\""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/example_ORA_markers.html","id":null,"dir":"Reference","previous_headings":"","what":"Example List of Markers for ORA — example_ORA_markers","title":"Example List of Markers for ORA — example_ORA_markers","text":"example_ORA_markers list provides markers use ORA","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/example_ORA_markers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example List of Markers for ORA — example_ORA_markers","text":"","code":"data(example_ORA_markers)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/example_ORA_markers.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example List of Markers for ORA — example_ORA_markers","text":"list following elements: upregulated character vector upregulated ions downregulated character vector downregulated ions character vector markers, including upregulated downregulated","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/example_ORA_markers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example List of Markers for ORA — example_ORA_markers","text":"","code":"# Load the marker list data(example_ORA_markers)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/example_ORA_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Example S2IsoMEr ORA Object — example_ORA_obj","title":"Example S2IsoMEr ORA Object — example_ORA_obj","text":"example_ORA_obj dataset pre-built S2IsoMEr enrichment object. object created using initEnrichment() function contains necessary parameters performing bootstrapping-based ORA.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/example_ORA_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example S2IsoMEr ORA Object — example_ORA_obj","text":"","code":"data(example_ORA_obj)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/example_ORA_obj.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example S2IsoMEr ORA Object — example_ORA_obj","text":"object class S2IsoMEr following components: scmatrix numeric matrix metabolite measurements, rows representing metabolites columns representing cells measurements. polarization_mode Character indicating polarization mode, either \"positive\" \"negative\". enrichment_type Character specifying enrichment analysis type, either \"ORA\" \"MSEA\". Annotation_database Character character vector specifying annotation database(s) used, e.g., \"CoreMetabolome\", \"HMDB\", \"SwissLipids\", \"LipidMaps\". Custom_database Optional custom annotation database provided dataframe two columns: \"formula\" \"molecule name\". annotations list length n, element contains vector isomer names associated metabolite. annotation.weights optional list length n, element containing vector isomer weights. isobars_list list isobaric species, used consider_isobars = TRUE. conditions vector condition identifiers, length equal number columns scmatrix. include logical vector indicating metabolites include analysis. consider_isomers Logical indicating whether isomers considered analysis. consider_isobars Logical indicating whether isobars included analysis. mass_range_ppm Numeric indicating mass range (ppm) isobar identification. background_name Character specifying enrichment background type, either \"custom\" combination molecule background types. endogenous_only Logical indicating whether consider endogenous metabolites. pathway_assoc_only Logical indicating whether include metabolites associated biological pathway. remove_expected_predicted Logical indicating whether remove expected predicted isomers based HMDB status. pathway_list list pathways associated analyzed metabolites. LUT lookup table used annotating metabolites. termsSelection Character specifying terms interest enrichment analysis. condition.x Character specifying first condition identifier pairwise comparison. condition.y Character specifying second condition identifier pairwise comparison. ranking.Character specifying ranking method used MSEA, e.g., \"wilcox.test\", \"t.test\", \"logFC\", \"BWS\". gsea.method Character specifying GSEA method, either \"ks_signed\" \"fgsea\".","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/example_ORA_obj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example S2IsoMEr ORA Object — example_ORA_obj","text":"","code":"# Load the example dataset data(example_ORA_obj)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/get_TP_markers_per_Term.html","id":null,"dir":"Reference","previous_headings":"","what":"Get intersection between term and query for a Specific Term — get_TP_markers_per_Term","title":"Get intersection between term and query for a Specific Term — get_TP_markers_per_Term","text":"function extracts unique true positive markers specified term ORA bootstrap result.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/get_TP_markers_per_Term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get intersection between term and query for a Specific Term — get_TP_markers_per_Term","text":"","code":"get_TP_markers_per_Term(ORA_boot_df, term_of_interest)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/get_TP_markers_per_Term.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get intersection between term and query for a Specific Term — get_TP_markers_per_Term","text":"ORA_boot_df data frame containing ORA bootstrap results. term_of_interest string specifying term true positive markers extracted.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/get_TP_markers_per_Term.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get intersection between term and query for a Specific Term — get_TP_markers_per_Term","text":"character vector containing unique true positive markers associated specified term.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/get_TP_markers_per_Term.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get intersection between term and query for a Specific Term — get_TP_markers_per_Term","text":"","code":"if (FALSE) { # \\dontrun{   # Example usage with hypothetical data   ORA_boot_df <- data.frame(     Term = c(\"Term1\", \"Term2\", \"Term1\"),     TP_markers = c(\"Marker1;Marker2\", \"Marker3;Marker4\", \"Marker2;Marker5\")   )   markers <- get_TP_markers_per_Term(ORA_boot_df, \"Term1\")   print(markers) } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/get_metabo_iso.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Metabolite Isomers and Isobars — get_metabo_iso","title":"Get Metabolite Isomers and Isobars — get_metabo_iso","text":"function retrieves metabolite isomers isobars given list sum formula, considering various parameters adducts, polarization mode, mass range.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/get_metabo_iso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Metabolite Isomers and Isobars — get_metabo_iso","text":"","code":"get_metabo_iso(   sf_vec,   consider_isobars = T,   polarization_mode = NA,   mass_range_ppm = 3,   annot_db = \"HMDB\",   annot_custom_db = NULL,   use_LION = F,   endogenous_only = T,   pathway_assoc_only = F,   remove_expected_predicted = T )"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/get_metabo_iso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Metabolite Isomers and Isobars — get_metabo_iso","text":"sf_vec character vector metabolite formulas optional adducts. formulas formatted formula[+adduct] formula[-adduct]. consider_isobars logical indicating whether consider isobars. TRUE, function identify include isobars based provided mass range. polarization_mode character string specifying ionization mode. Options \"positive\" \"negative\". relevant consider_isobars TRUE. mass_range_ppm numeric value specifying mass range parts per million (ppm) identifying isobars. annot_db character vector specifying annotation databases use. Options include \"HMDB\", \"LipidMaps\", \"SwissLipids\", \"CoreMetabolome\". annot_custom_db custom annotation database. NULL, custom database used instead specified annotation databases. use_LION logical indicating whether use LION version LipidMaps database \"LipidMaps\" included annot_db. endogenous_only logical indicating whether include endogenous metabolites. Applies \"HMDB\" \"CoreMetabolome\". pathway_assoc_only logical indicating whether include metabolites associated pathways. Applies \"HMDB\" \"CoreMetabolome\". remove_expected_predicted logical indicating whether remove metabolites status \"expected\" \"predicted\" HMDB CoreMetabolome databases.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/get_metabo_iso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Metabolite Isomers and Isobars — get_metabo_iso","text":"named list element corresponds formula sf_vec. element character vector containing metabolite names matching formula isobars, consider_isobars TRUE.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/get_metabo_iso.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Metabolite Isomers and Isobars — get_metabo_iso","text":"function processes vector metabolite formulas retrieves corresponding metabolite names specified annotation databases. consider_isobars TRUE, also find isobars based specified mass range polarization mode.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/get_metabo_iso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Metabolite Isomers and Isobars — get_metabo_iso","text":"","code":"if (FALSE) { # \\dontrun{ sf_vec <- c(\"C6H12O6+H\", \"C6H12O6-H\") results <- get_metabo_iso(   sf_vec,   consider_isobars = TRUE,   polarization_mode = \"positive\",   mass_range_ppm = 5 ) } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/initEnrichment.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate S2IsoMEr enrichment object — initEnrichment","title":"Generate S2IsoMEr enrichment object — initEnrichment","text":"initEnrichment() creates object perform bootstrapping metabolite set enrichment analysis","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/initEnrichment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate S2IsoMEr enrichment object — initEnrichment","text":"","code":"initEnrichment(   scmatrix,   conditions,   enrichment_type = c(\"ORA\", \"MSEA\"),   annot_db = \"HMDB\",   annot_custom_db = NULL,   endogenous_only = T,   pathway_assoc_only = F,   remove_expected_predicted = T,   annotations = NULL,   annotation.weights = NULL,   consider_isomers = TRUE,   consider_isobars = FALSE,   mass_range_ppm = 3,   polarization_mode = \"positive\",   include = NULL,   molecule_type = c(\"Lipid\", \"Metabo\"),   background_type = c(\"LION\", \"main_class\", \"super_class\", \"sub_class\", \"pathways\"),   custom_bg = NULL,   termsOfInterest = \"all\",   condition.x = NULL,   condition.y = NULL,   ranking.by = c(\"wilcox.test\", \"t.test\", \"BWS\", \"logFC\"),   gsea.method = c(\"fgsea\", \"ks_signed\") )"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/initEnrichment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate S2IsoMEr enrichment object — initEnrichment","text":"scmatrix numeric matrix n metabolites (rows) m cells measurments (columns). conditions vector length m condition identifiers. enrichment_type character specifying whether Overrepresentation analysis (ORA) Metabolite Set Enrichment Analysis (MSEA) performed annot_db character character vector specifying annotation database(s) used. Current databases include (\"CoreMetabolome\", \"HMDB\",\"SwissLipids\",\"LipidMaps\"). Multiple databases can selected annot_custom_db optional dataframe isomers sampled. 2 columns : formula molecule name. provided, annot_db ignored. endogenous_only logical indicating whether consider endogenous metabolites (default = TRUE). pathway_assoc_only logical indicating whether consider metabolites associated biological pathway (default = FALSE) remove_expected_predicted logical indicating whether remove expected predicted isomers based HMDB status (default = TRUE) annotations optional custom list length n, element contains vector isomer names. specified, S2IsoMEr uses CoreMetabolome, LIPIDMAPS, SwissLipids, HMDB databases METASPACE (https://metaspace2020.eu/) generate annotation list automatically. annotation.weights optional list length n, element contains vector isomer weights. annotations provided list. consider_isomers logical indicating whether include isomers (default = TRUE) consider_isobars logical indicating whether include isobars (default = FALSE) mass_range_ppm numeric indicating mass range ppm (default: mass_range_ppm = 3). Molecular formulas + adducts within range treated isobars. required isobars = TRUE. polarization_mode character either 'positive' (default) 'negative'. required isobars = TRUE. set 'positive', included adducts '+H', '+Na', '+K'. set 'negative', included adducts '-H', '+Cl'. include optional logical vector length n indicating whether include annotations analysis. molecule_type character specifying feature type enrichment background, either Metabolites Lipids. Valid choices c(\"Metabo\", \"Lipid\"). background_type character specifying background type enrichment, choose one c(\"LION\",\"main_class\",\"super_class\",\"sub_class\",\"pathways\"). custom_bg named list character vectors metabolite names. Default NULL termsOfInterest character containing 'selection' (default LION-term selection), '', vector term names (see 'pathway'). condition.x first condition identifier pairwise comparison. condition.y second condition identifier pairwise comparison. ranking.character either 'wilcox.test' (default), 't.test', 'logFC' 'BWS', rank metabolites using respective statistic. Check rankScore details. Ignored enrichment_type 'ORA'. gsea.method character either 'ks_signed' 'fgsea'. Ignored enrichment_type 'ORA'.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/initEnrichment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate S2IsoMEr enrichment object — initEnrichment","text":"object class S2IsoMEr.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/initEnrichment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate S2IsoMEr enrichment object — initEnrichment","text":"","code":"if (FALSE) { # \\dontrun{ data(\"example_ORA_obj\") input_scm = example_ORA_obj$scmatrix conds = example_ORA_obj$conditions cond_x = \"U\" cond_y = \"F\" ORA_obj <- initEnrichment(   scmatrix = input_scm,   conditions = conds,   enrichment_type = \"ORA\",   annot_db = \"HMDB\",   consider_isomers = TRUE,   consider_isobars = TRUE,   polarization_mode = \"positive\",   background_type = \"sub_class\",   molecule_type = \"Metabo\",   condition.x = cond_x,   condition.y = cond_y ) } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/map_TP_markers_to_ions.html","id":null,"dir":"Reference","previous_headings":"","what":"Map True Positive Markers to Input Ions from single cell matrix. — map_TP_markers_to_ions","title":"Map True Positive Markers to Input Ions from single cell matrix. — map_TP_markers_to_ions","text":"function maps true positive markers corresponding ions modifying matching marker ion names.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/map_TP_markers_to_ions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map True Positive Markers to Input Ions from single cell matrix. — map_TP_markers_to_ions","text":"","code":"map_TP_markers_to_ions(markers, scm_ions)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/map_TP_markers_to_ions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map True Positive Markers to Input Ions from single cell matrix. — map_TP_markers_to_ions","text":"markers character vector containing true positive markers obtained get_TP_markers_per_Term scm_ions character vector containing input ion names.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/map_TP_markers_to_ions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map True Positive Markers to Input Ions from single cell matrix. — map_TP_markers_to_ions","text":"character vector containing ions match given true positive markers.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/map_TP_markers_to_ions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map True Positive Markers to Input Ions from single cell matrix. — map_TP_markers_to_ions","text":"","code":"if (FALSE) { # \\dontrun{ markers <- c(\"sf.Na\", \"sf.H\") scm_ions <- c(\"sf+Na\", \"sf+H\") map_TP_markers_to_ions(markers, scm_ions) } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/metabo_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Bootstrap Sampling on Metabolite Annotations — metabo_bootstrap","title":"Perform Bootstrap Sampling on Metabolite Annotations — metabo_bootstrap","text":"function performs bootstrap sampling metabolite annotations, allowing resampling molecules without associated weights. generates multiple bootstrap samples analysis.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/metabo_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Bootstrap Sampling on Metabolite Annotations — metabo_bootstrap","text":"","code":"metabo_bootstrap(annot_list, annot_weights = NULL, n_bootstraps = 50)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/metabo_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Bootstrap Sampling on Metabolite Annotations — metabo_bootstrap","text":"annot_list list character vectors vector contains metabolites molecules particular annotation. element list corresponds specific sum formula. annot_weights list numeric vectors vector contains weights associated metabolites annot_list. Must length annot_list. NULL, metabolites equally weighted. n_bootstraps integer specifying number bootstrap samples generate.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/metabo_bootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Bootstrap Sampling on Metabolite Annotations — metabo_bootstrap","text":"list length n_bootstraps, element list bootstrap samples sum formula. bootstrap sample character vector sampled metabolites.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/metabo_bootstrap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform Bootstrap Sampling on Metabolite Annotations — metabo_bootstrap","text":"function used create multiple bootstrap samples metabolite annotations randomly sampling metabolites sum formula. weights provided, sampling performed according weights; otherwise, sampling uniform.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/metabo_bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Bootstrap Sampling on Metabolite Annotations — metabo_bootstrap","text":"","code":"if (FALSE) { # \\dontrun{ annot_list <- list(   Sf1 = c(\"Metabolite1\", \"Metabolite2\", \"Metabolite3\"),   Sf2 = c(\"MetaboliteA\", \"MetaboliteB\") ) annot_weights <- list(   Sf1 = c(0.1, 0.2, 0.7),   Sf2 = c(0.5, 0.5) ) bootstrapped_samples <- metabo_bootstrap(annot_list, annot_weights, n_bootstraps = 100) } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/passed_filters_per_term.html","id":null,"dir":"Reference","previous_headings":"","what":"Report filters applied to bootstrap-based enrichment results — passed_filters_per_term","title":"Report filters applied to bootstrap-based enrichment results — passed_filters_per_term","text":"function filters enrichment results based various criteria, minimum intersection, significance thresholds, bootstrapping fractions, reporting terms passed / pass filter.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/passed_filters_per_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report filters applied to bootstrap-based enrichment results — passed_filters_per_term","text":"","code":"passed_filters_per_term(   unfiltered_df,   enrich_type = c(\"ORA\", \"MSEA\"),   min_intersection = 3,   alpha_cutoff = 0.05,   q.val_cutoff = 0.2,   boot_fract_cutoff = 0.5 )"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/passed_filters_per_term.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report filters applied to bootstrap-based enrichment results — passed_filters_per_term","text":"unfiltered_df data frame containing unfiltered enrichment results Run_bootstrap_ORA Run_bootstrap_MSEA. enrich_type character string specifying type enrichment analysis. Must either \"ORA\" (-Representation Analysis) \"MSEA\" (Metabolite Set Enrichment Analysis). min_intersection integer specifying minimum number true positives (TP) required term pass filter. alpha_cutoff numeric value specifying p-value cutoff significance. Default 0.05. q.val_cutoff numeric value specifying q-value cutoff significance. Default 0.2. boot_fract_cutoff numeric value specifying minimum fraction bootstraps term must present considered.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/passed_filters_per_term.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report filters applied to bootstrap-based enrichment results — passed_filters_per_term","text":"data frame binary columns indicating terms pass specified criteria. data frame columns include: Term min_TP (minimum true positives) significant_adj_boot (significant adjusted bootstrap p-value) significant_adj_terms (significant adjusted term p-value) pass_boot_fraction (pass bootstrapping fraction) pass_all_filts (Whether term passes filters)","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/passed_filters_per_term.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Report filters applied to bootstrap-based enrichment results — passed_filters_per_term","text":"function adjusts p-values using False Discovery Rate (FDR) method calculates combined p-values using metap::sumlog function. applies several filters determine terms pass criteria.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/passed_filters_per_term.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report filters applied to bootstrap-based enrichment results — passed_filters_per_term","text":"","code":"if (FALSE) { # \\dontrun{ data(\"example_ORA_obj\") data(\"example_ORA_custom_universe\") input_scm = example_ORA_obj$scmatrix conds = example_ORA_obj$conditions cond_x = \"U\" cond_y = \"F\" ORA_obj <- initEnrichment(   scmatrix = input_scm,   conditions = conds,   enrichment_type = \"ORA\",   annot_db = \"HMDB\",   consider_isomers = TRUE,   consider_isobars = TRUE,   polarization_mode = \"positive\",   background_type = \"sub_class\",   molecule_type = \"Metabo\",   condition.x = cond_x,   condition.y = cond_y ) ORA_res <- Run_enrichment(   object = ORA_obj,   custom_universe = example_ORA_custom_universe,   report_ambiguity_scores = TRUE,   DE_LFC_cutoff = 0,   min.pct.diff = 0 ) enrich_ORA_summary <- passed_filters_per_term(   unfiltered_df = ORA_res$upregulated$unfiltered_enrich_res,   enrich_type = \"ORA\" ) } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/plot_MSEA_Multi_cond.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Heatmap of MSEA Results Across Multiple Conditions — plot_MSEA_Multi_cond","title":"Plot Heatmap of MSEA Results Across Multiple Conditions — plot_MSEA_Multi_cond","text":"function generates heatmap combined MSEA results. heatmap displays normalized enrichment scores (NES) across multiple conditions highlights significant results based specified alpha cutoff.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/plot_MSEA_Multi_cond.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Heatmap of MSEA Results Across Multiple Conditions — plot_MSEA_Multi_cond","text":"","code":"plot_MSEA_Multi_cond(combined_MSEA_res, alpha_cutoff = 0.05)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/plot_MSEA_Multi_cond.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Heatmap of MSEA Results Across Multiple Conditions — plot_MSEA_Multi_cond","text":"combined_MSEA_res data frame containing combined MSEA results pairwise comparison either enrichment results Run_bootstrap_MSEA Run_simple_MSEA alpha_cutoff numeric value specifying cutoff significance. Terms p-values threshold marked significant. Default 0.05.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/plot_MSEA_Multi_cond.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Heatmap of MSEA Results Across Multiple Conditions — plot_MSEA_Multi_cond","text":"heatmap plot showing NES values term across different condition pairs. Significant results highlighted asterisk.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/plot_MSEA_Multi_cond.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Heatmap of MSEA Results Across Multiple Conditions — plot_MSEA_Multi_cond","text":"function checks presence required columns ensures enough conditions generate meaningful plot. heatmap includes color coding NES values, significant results indicated asterisks.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/plot_MSEA_Multi_cond.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Heatmap of MSEA Results Across Multiple Conditions — plot_MSEA_Multi_cond","text":"","code":"if (FALSE) { # \\dontrun{ data(\"example_MSEA_multicond\") p = plot_MSEA_Multi_cond(combined_MSEA_res = example_MSEA_multicond,                          alpha_cutoff = 0.05) } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/rankScore.html","id":null,"dir":"Reference","previous_headings":"","what":"Rank metabolites for S2IsoMEr enrichment object — rankScore","title":"Rank metabolites for S2IsoMEr enrichment object — rankScore","text":"rankScore() ranks metabolites S2IsoMEr object perform bootstrapping metabolite set enrichment analysis","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/rankScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rank metabolites for S2IsoMEr enrichment object — rankScore","text":"","code":"rankScore(object, ranking.by = \"wilcox.test\", alternative = \"greater\")"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/rankScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rank metabolites for S2IsoMEr enrichment object — rankScore","text":"object S2IsoMEr object. ranking.character string specifying ranking method. Options include: \"wilcox.test\" (default) - Ranks metabolites based results Wilcoxon test. \"t.test\" - Ranks metabolites based results t-test. \"logFC\" - Ranks metabolites based log fold change. \"BWS\" - Ranks metabolites based BWS (Baumgartner-Weiss-Schindler ). alternative character string specifying alternative hypothesis statistical tests. Options : \"two.sided\" - Test differences directions. \"less\" - Test second condition less first \"greater\" - Test second condition greater first Default \"greater\".","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/rankScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rank metabolites for S2IsoMEr enrichment object — rankScore","text":"object class S2IsoMEr.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/rankScore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rank metabolites for S2IsoMEr enrichment object — rankScore","text":"","code":"if (FALSE) { # \\dontrun{ data(\"example_ORA_obj\") example_ORA_obj <- rankScore(object = example_ORA_obj, ranking.by = 't.test') } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/ridge_bootstraps.html","id":null,"dir":"Reference","previous_headings":"","what":"Ridge Plot of Bootstrap Enrichment Results for Terms of Interest — ridge_bootstraps","title":"Ridge Plot of Bootstrap Enrichment Results for Terms of Interest — ridge_bootstraps","text":"function creates ridge plot visualizing distribution intersection sizes (TP) specified terms interest bootstrap enrichment results.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/ridge_bootstraps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ridge Plot of Bootstrap Enrichment Results for Terms of Interest — ridge_bootstraps","text":"","code":"ridge_bootstraps(enrich_res, terms_of_interest, condition = NULL)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/ridge_bootstraps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ridge Plot of Bootstrap Enrichment Results for Terms of Interest — ridge_bootstraps","text":"enrich_res data frame containing enrichment results per bootstrap, including columns Term, n (TP), fraction. terms_of_interest character vector specifying terms interest plotted. condition Optional. character string specifying particular condition filter enrichment results. NULL (default), results conditions included.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/ridge_bootstraps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ridge Plot of Bootstrap Enrichment Results for Terms of Interest — ridge_bootstraps","text":"ggplot object displaying ridge plot intersection sizes specified terms interest.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/ridge_bootstraps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ridge Plot of Bootstrap Enrichment Results for Terms of Interest — ridge_bootstraps","text":"function filters enrichment results include specified terms interest creates ridge plot showing distribution intersection sizes (TP). terms labeled names fraction bootstraps appear, plot includes quantile lines indicate distribution quartiles.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/ridge_bootstraps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ridge Plot of Bootstrap Enrichment Results for Terms of Interest — ridge_bootstraps","text":"","code":"if (FALSE) { # \\dontrun{ data(\"example_ORA_obj\") data(\"example_ORA_custom_universe\") input_scm = example_ORA_obj$scmatrix conds = example_ORA_obj$conditions cond_x = \"U\" cond_y = \"F\" ORA_obj <- initEnrichment(   scmatrix = input_scm,   conditions = conds,   enrichment_type = \"ORA\",   annot_db = \"HMDB\",   consider_isomers = TRUE,   consider_isobars = TRUE,   polarization_mode = \"positive\",   background_type = \"sub_class\",   molecule_type = \"Metabo\",   condition.x = cond_x,   condition.y = cond_y ) ORA_res <- Run_enrichment(   object = ORA_obj,   custom_universe = example_ORA_custom_universe,   report_ambiguity_scores = TRUE,   DE_LFC_cutoff = 0,   min.pct.diff = 0 ) multi_cond_res = collapse_ORA_boot_multi_cond(ORA_boot_res_list = ORA_res) p4 = ridge_bootstraps(enrich_res = multi_cond_res$unfiltered_enrich_res,                      terms_of_interest = c(multi_cond_res$clean_enrich_res$Term),                      condition = \"upregulated\") } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/setConditions.html","id":null,"dir":"Reference","previous_headings":"","what":"Set conditions for enrichment analysis — setConditions","title":"Set conditions for enrichment analysis — setConditions","text":"Set conditions enrichment analysis","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/setConditions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set conditions for enrichment analysis — setConditions","text":"","code":"setConditions(object, condition.x = NULL, condition.y = NULL)"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/setConditions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set conditions for enrichment analysis — setConditions","text":"object S2IsoMEr object. condition.x optional character describing reference condition. condition.y optional character describing condition interest.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/setConditions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set conditions for enrichment analysis — setConditions","text":"object class S2IsoMEr.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/setConditions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set conditions for enrichment analysis — setConditions","text":"","code":"if (FALSE) { # \\dontrun{ data(\"example_MSEA_obj\") example_MSEA_obj = setConditions(example_MSEA_obj, condition.x = 'U', condition.y = \"FI\") } # }"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/simple_fgsea.html","id":null,"dir":"Reference","previous_headings":"","what":"Run simple fGSEA enrichment — simple_fgsea","title":"Run simple fGSEA enrichment — simple_fgsea","text":"simple_fgsea calls simple fGSEA fgsea package","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/simple_fgsea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run simple fGSEA enrichment — simple_fgsea","text":"","code":"simple_fgsea(   pathways,   stats,   minSize = 1,   maxSize = length(stats) - 1,   eps = 1e-50,   scoreType = c(\"std\", \"pos\", \"neg\"),   nPermSimple = 1000 )"},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/simple_fgsea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run simple fGSEA enrichment — simple_fgsea","text":"pathways List metabolite sets check. stats Named vector metabolite-level stats. Names 'pathways' minSize Minimal size metabolite set test. pathways threshold excluded. maxSize Maximal size metabolite set test. pathways threshold excluded. eps parameter sets boundary calculating p value. scoreType parameter defines GSEA score type. Possible options (\"std\", \"pos\", \"neg\") nPermSimple Number permutations simple fgsea implementation preliminary estimation P-values","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/simple_fgsea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run simple fGSEA enrichment — simple_fgsea","text":"table GSEA results. row corresponds tested pathway. columns following: pathway – name pathway names(pathway); pval – enrichment p-value; padj – BH-adjusted p-value; ES – enrichment score, Broad GSEA implementation; NES – enrichment score normalized mean enrichment random samples size; nMoreExtreme-- number times random gene set extreme enrichment score value; \\item size -- size pathway removing genes present innames(stats)`. leadingEdge – vector indexes leading edge genes drive enrichment, see https://www.gsea-msigdb.org/gsea/doc/GSEAUserGuideTEXT.htm#_Running_a_Leading.","code":""},{"path":"https://alexandrovteam.github.io/S2IsoMEr/reference/simple_fgsea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run simple fGSEA enrichment — simple_fgsea","text":"","code":"bg = list(\"Term_A\" = paste0(\"mol_\", sample(100,20)),\"Term_B\" = paste0(\"mol_\", sample(100,20))) mol_ranks = runif(10, -3, 3) names(mol_ranks) = sample(unique(unlist(bg)), 10) mol_ranks = mol_ranks[order(mol_ranks)] simple_fgsea(pathways = bg, stats = mol_ranks, minSize = 3, scoreType = \"std\") #>    pathway      pval      padj         ES       NES nMoreExtreme  size #>     <char>     <num>     <num>      <num>     <num>        <num> <int> #> 1:  Term_A 0.1056338 0.1108696  0.8000000  1.489072           59     5 #> 2:  Term_B 0.1108696 0.1108696 -0.7664702 -1.452191           50     5 #>     leadingEdge #>          <list> #> 1: mol_45, .... #> 2: mol_53, ...."},{"path":[]},{"path":"https://alexandrovteam.github.io/S2IsoMEr/news/index.html","id":"s2isomer-030","dir":"Changelog","previous_headings":"","what":"S2IsoMEr 0.3.0","title":"S2IsoMEr 0.3.0","text":"Added NEWS.md file track changes package.","code":""}]
